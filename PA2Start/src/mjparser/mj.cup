
package mjparser;
import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;


parser code {:

    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            
:}

/* Notice: all terminals declared here */
terminal SymbolValue PLUS, MINUS, TIMES, LPAREN, RPAREN;
terminal SymbolValue LBRACE, RBRACE;
terminal SymbolValue BOOLEAN, INT;
terminal SymbolValue BYTE;
terminal SymbolValue MAIN, IMPORT;
terminal SymbolValue IF, ELSE;
terminal SymbolValue LT;
terminal SymbolValue EQUAL;
terminal SymbolValue AND, NOT;
terminal SymbolValue WHILE;
terminal SymbolValue COMMA, DOT;
terminal SymbolValue NEW, PUBLIC, RETURN, STATIC;
terminal SymbolValue STRING, VOID;
terminal SymbolValue CLASS, EXTENDS;
terminal SymbolValue LBRACKET, RBRACKET;
terminal SymbolValue LENGTH;
terminal SymbolValue SEMI;
terminal SymbolValue ASSIGN;

terminal SymbolValue MEGGY;
terminal SymbolValue MEGGYCOLOR;
terminal SymbolValue MEGGYBUTTON;
terminal SymbolValue MEGGYTONE;
terminal SymbolValue MEGGYSETPIXEL;
terminal SymbolValue MEGGYSETAUXLEDS;
terminal SymbolValue MEGGYTONESTART;
terminal SymbolValue MEGGYDELAY;
terminal SymbolValue MEGGYGETPIXEL;
terminal SymbolValue MEGGYCHECKBUTTON;

terminal SymbolValue INT_LITERAL, ID;
terminal SymbolValue TRUE, FALSE;
terminal SymbolValue COLOR_LITERAL, BUTTON_LITERAL, TONE_LITERAL;
terminal SymbolValue THIS;

/* bogus terminal for unary precedence declaration */
terminal UMINUS;
/* bogus terminal for byte cast */
terminal BYTECAST;

non terminal Program program;
non terminal IExp exp;
non terminal IStatement statement;
non terminal BlockStatement statement_list;
non terminal MainClass main_class;
non terminal LinkedList<IClassDecl> class_decl_list;
non terminal TopClassDecl class_decl;
non terminal LinkedList<MethodDecl> method_decl_list;
non terminal MethodDecl method_decl;
non terminal LinkedList<Formal> arg_list;
non terminal IExp return_stmt;
non terminal LinkedList<IExp> exp_list;
non terminal LinkedList<IExp> comma_exp_list;
non terminal LinkedList<Formal> comma_list;
non terminal Formal formal;
non terminal IType type;

/* Declare precedence and associativity  here */
precedence left ELSE;
precedence left AND;
precedence left EQUAL;
precedence left LT;
precedence left PLUS,MINUS;
precedence left TIMES;
precedence right UMINUS, NOT;
precedence right BYTECAST;


/* Meggy Java Grammar */
start with program;

program ::= 
    IMPORT:start MEGGY SEMI main_class:mc class_decl_list:clist
		{:
			RESULT = new Program(start.line, start.pos, mc, clist);
		:}
    ;
    
main_class ::=
        CLASS:start ID:name
	{:
		// Check filename is class name, if not exit with error message
		String progName = new String(parser.programName);
		//Truncate the '.java' extension from the program name
		progName = progName.substring(0, progName.indexOf('.'));
		if (!progName.equals(name.lexeme)) {
			System.err.println("ERROR: File name '" + progName +
			"'(.java) does not match class name '" + name.lexeme +
			"'. Exiting.");
			System.exit(0);
		}
	:}
        LBRACE PUBLIC STATIC VOID MAIN
        LPAREN STRING LBRACKET RBRACKET ID:param RPAREN
        LBRACE statement_list:list RBRACE
	RBRACE
	{:
		RESULT = new MainClass(start.line, start.pos, name.lexeme, param.lexeme, list);
	:}
    ;
class_decl_list ::=
	class_decl_list:list class_decl:cl
	{:
		list.add(cl);
		RESULT = list;
	:}
	| //epsilon
	{:
		LinkedList<IClassDecl> list = new LinkedList<IClassDecl>();
		RESULT = list;
	:}
    ;
class_decl ::=
	CLASS:start ID:name LBRACE method_decl_list:list RBRACE
	{:
		RESULT = new TopClassDecl(start.line, start.pos, name.lexeme, null, list);
	:}
    ;
method_decl_list ::=
	method_decl_list:list method_decl:met
	{:
		list.add(met);
		RESULT = list;
	:}
	| //epsilon
	{:
		LinkedList<MethodDecl> list = new LinkedList<MethodDecl>();
		RESULT = list;
	:}
    ;
method_decl ::=
	PUBLIC:start type:ret ID:name LPAREN arg_list:formals RPAREN
	LBRACE statement_list:stmts return_stmt:retexp RBRACE
	{:
		RESULT = new MethodDecl(start.line, start.pos, ret, name.lexeme, formals, null, stmts.getStatements(), retexp);
	:}
    ;
return_stmt ::=
	RETURN:start exp:e SEMI
	{:
		RESULT = e;
	:}
	| // epsilon
	{:
		RESULT = null;
	:}
    ;
arg_list ::=
	formal:f comma_list:list
	{:
		list.addFirst(f);
		if (!list.isEmpty()) {
			list.addAll(list);
		}
		RESULT = list;
	:}
	| // epsilon
	{:
		LinkedList<Formal> list = new LinkedList<Formal>();
		RESULT = list;
	:}
    ;
comma_list ::=
	comma_list:cl COMMA formal:f
	{:
		cl.add(f);
		RESULT = cl;
	:}
	| // epsilon
	{:
		LinkedList<Formal> list = new LinkedList<Formal>();
		RESULT = list;
	:}
    ;
formal ::=
	type:t ID:name
	{:
		RESULT = new Formal(t.getLine(), t.getPos(), t, name.lexeme);
	:}
    ;
statement_list ::=

	statement_list:list statement:s
	{:
		list.getStatements().add(s);
		RESULT = list;
	:}
    |   // epsilon
	{:
		BlockStatement list = new BlockStatement(0, 0);
		RESULT = list;
	:}
    ;
type ::=
	BOOLEAN:b
	{:
		RESULT = new BoolType(b.line, b.pos);
	:}
    |   BYTE:b
	{:
		RESULT = new ByteType(b.line, b.pos);
	:}
    |   INT:i
	{:
		RESULT = new IntType(i.line, i.pos);
	:}
    |   VOID:v
	{:
		RESULT = new VoidType(v.line, v.pos);
	:}
    |   MEGGYCOLOR:c
	{:
		RESULT = new ColorType(c.line, c.pos);
	:}
    |   MEGGYBUTTON:b
	{:
		RESULT = new ButtonType(b.line, b.pos);
	:}
    |   MEGGYTONE:t
	{:
		RESULT = new ToneType(t.line, t.pos);
	:}
    ;
statement ::=

	LBRACE statement_list:list RBRACE
	{:
		RESULT = list;
	:}
    |	MEGGYSETPIXEL:start LPAREN exp:x_arg COMMA
	exp:y_arg COMMA exp:col
	RPAREN SEMI
	{:
		RESULT = new MeggySetPixel(start.line, start.pos, x_arg, y_arg, col);
	:}
    |	MEGGYDELAY:start LPAREN exp:arg RPAREN SEMI
	{:
		RESULT = new MeggyDelay(start.line, start.pos, arg);
	:}
    |	exp:e DOT ID:name LPAREN exp_list:list RPAREN SEMI
	{:
		RESULT = new CallStatement(e.getLine(), e.getPos(), e, name.lexeme, list);
	:}
    |	IF:start LPAREN exp:e RPAREN statement:s
	{:
		RESULT = new IfStatement(start.line, start.pos, e, s, null); 
	:}
    |	IF:start LPAREN exp:e RPAREN statement:s ELSE statement:el
	{:
		RESULT = new IfStatement(start.line, start.pos, e, s, el);
	:}
    |	WHILE:start LPAREN exp:e RPAREN statement:s
	{:
		RESULT = new WhileStatement(start.line, start.pos, e, s);
	:}
    ;
exp_list ::=
	exp:e comma_exp_list:list
	{:
		list.addFirst(e);
		if (!list.isEmpty()) {
			list.addAll(list);
		}
		RESULT = list;
	:}
	| // epsilon
	{:
		LinkedList<IExp> list = new LinkedList<IExp>();
		RESULT = list;
	:}
    ;
comma_exp_list ::=
	comma_exp_list:cl COMMA exp:e
	{:
		cl.add(e);
		RESULT = cl;
	:}
	| // epsilon
	{:
		LinkedList<IExp> list = new LinkedList<IExp>();
		RESULT = list;
	:}
    ;
exp ::=
	exp:l AND:a exp:r
	{:
		RESULT = new AndExp(a.line, a.pos, l, r);
	:}
    |	exp:l LT:lt exp:r
	{:
		RESULT = new LtExp(lt.line, lt.pos, l, r);
	:}
    |	exp:l EQUAL:eq exp:r
	{:
		RESULT = new EqualExp(eq.line, eq.pos, l, r);
	:}
    |	exp:l PLUS:p exp:r
	{:
		RESULT = new PlusExp(p.line, p.pos, l, r);
	:}
    |	exp:l MINUS:m exp:r
	{:
		RESULT = new MinusExp(m.line, m.pos, l, r);
	:}
    |	exp:l TIMES:t exp:r
	{:
		RESULT = new MulExp(t.line, t.pos, l, r);
	:}
    |	MINUS:start exp:e
	{:
		RESULT = new NegExp(start.line, start.pos, e);
	:}
	%prec UMINUS
    |	exp:e DOT ID:name LPAREN exp_list:list RPAREN
	{:
		RESULT = new CallExp(e.getLine(), e.getPos(), e, name.lexeme, list);
	:}
    |	MEGGYGETPIXEL:start LPAREN exp:x_arg COMMA exp:y_arg RPAREN
	{:
		RESULT = new MeggyGetPixel(start.line, start.pos, x_arg, y_arg);
	:}
    |	MEGGYCHECKBUTTON:start LPAREN exp:arg RPAREN
	{:
		RESULT = new MeggyCheckButton(start.line, start.pos, arg);
	:}
    |	LPAREN:start BYTE RPAREN exp:e
	{:
		RESULT = new ByteCast(start.line, start.pos, e);
	:}
	%prec BYTECAST
    |   INT_LITERAL:integer
	{:
		RESULT = new IntLiteral(integer.line, integer.pos, integer.lexeme, integer.value);
	:}
    |   COLOR_LITERAL:col
	{:
		RESULT = new ColorLiteral(col.line, col.pos, col.lexeme, col.value);
	:}
    |	BUTTON_LITERAL:button
	{:
		RESULT = new ButtonLiteral(button.line, button.pos, button.lexeme, button.value);
	:}
    |   TRUE:t
	{:
		RESULT = new TrueLiteral(t.line, t.pos, t.lexeme, t.value);
	:}
    |	FALSE:f
	{:
		RESULT = new FalseLiteral(f.line, f.pos, f.lexeme, f.value);
	:}
    |	ID:name
	{:
		RESULT = new IdLiteral(name.line, name.pos, name.lexeme);
	:}
    |	THIS:t
	{:
		RESULT = new ThisLiteral(t.line, t.pos, t.lexeme, t.value);
	:}
    |	NEW:start ID:name LPAREN RPAREN
	{:
		RESULT = new NewExp(start.line, start.pos, name.lexeme);
	:}
    |	NOT:n exp:e
	{:
		RESULT = new NotExp(n.line, n.pos, e);
	:}
    |	LPAREN exp:e RPAREN
	{:
		RESULT = e;
	:}
    ;

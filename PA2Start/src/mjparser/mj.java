
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 14 23:02:36 MDT 2014
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 14 23:02:36 MDT 2014
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\007\000\002\022" +
    "\002\000\002\006\024\000\002\007\004\000\002\007\002" +
    "\000\002\010\007\000\002\011\004\000\002\011\002\000" +
    "\002\012\014\000\002\014\005\000\002\014\002\000\002" +
    "\013\004\000\002\013\002\000\002\017\005\000\002\017" +
    "\002\000\002\020\004\000\002\005\004\000\002\005\002" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\004\005\000\002\004\013\000\002\004" +
    "\007\000\002\004\011\000\002\004\007\000\002\004\011" +
    "\000\002\004\007\000\002\015\004\000\002\015\002\000" +
    "\002\016\005\000\002\016\002\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\010" +
    "\000\002\003\010\000\002\003\006\000\002\003\006\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\006\000\002\003\004\000\002\003\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\004\017\005\001\002\000\004\002\226\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\205\001\002\000" +
    "\006\002\ufffc\037\ufffc\001\002\000\006\002\000\037\014" +
    "\001\002\000\006\002\ufffd\037\ufffd\001\002\000\004\061" +
    "\015\001\002\000\004\011\016\001\002\000\006\012\ufff9" +
    "\032\ufff9\001\002\000\006\012\021\032\022\001\002\000" +
    "\006\012\ufffa\032\ufffa\001\002\000\006\002\ufffb\037\ufffb" +
    "\001\002\000\020\013\031\014\032\015\025\036\030\047" +
    "\026\050\027\051\023\001\002\000\004\061\uffe8\001\002" +
    "\000\004\061\033\001\002\000\004\061\uffed\001\002\000" +
    "\004\061\uffea\001\002\000\004\061\uffe9\001\002\000\004" +
    "\061\uffeb\001\002\000\004\061\uffee\001\002\000\004\061" +
    "\uffec\001\002\000\004\007\034\001\002\000\022\010\ufff4" +
    "\013\031\014\032\015\025\036\030\047\026\050\027\051" +
    "\023\001\002\000\006\010\ufff2\027\ufff2\001\002\000\004" +
    "\010\041\001\002\000\004\061\040\001\002\000\006\010" +
    "\ufff1\027\ufff1\001\002\000\004\011\042\001\002\000\052" +
    "\005\uffef\007\uffef\011\uffef\012\uffef\020\uffef\025\uffef\026" +
    "\uffef\031\uffef\033\uffef\052\uffef\055\uffef\056\uffef\057\uffef" +
    "\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef\067" +
    "\uffef\001\002\000\052\005\065\007\053\011\054\012\ufff6" +
    "\020\052\025\046\026\045\031\067\033\047\052\060\055" +
    "\070\056\071\057\063\060\057\061\055\062\051\063\064" +
    "\064\061\065\066\067\056\001\002\000\052\005\ufff0\007" +
    "\ufff0\011\ufff0\012\ufff0\020\ufff0\025\ufff0\026\ufff0\031\ufff0" +
    "\033\ufff0\052\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061" +
    "\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\067\ufff0\001\002" +
    "\000\004\007\176\001\002\000\034\005\065\007\053\025" +
    "\046\031\067\056\071\057\063\060\057\061\055\062\051" +
    "\063\064\064\061\065\066\067\056\001\002\000\034\005" +
    "\065\007\053\025\046\031\067\056\071\057\063\060\057" +
    "\061\055\062\051\063\064\064\061\065\066\067\056\001" +
    "\002\000\020\004\077\005\101\006\102\022\075\023\100" +
    "\024\076\030\165\001\002\000\026\004\uffce\005\uffce\006" +
    "\uffce\010\uffce\022\uffce\023\uffce\024\uffce\027\uffce\030\uffce" +
    "\044\uffce\001\002\000\004\007\157\001\002\000\036\005" +
    "\065\007\053\015\153\025\046\031\067\056\071\057\063" +
    "\060\057\061\055\062\051\063\064\064\061\065\066\067" +
    "\056\001\002\000\050\005\uffef\007\uffef\011\uffef\012\uffef" +
    "\020\uffef\025\uffef\026\uffef\031\uffef\052\uffef\055\uffef\056" +
    "\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef" +
    "\065\uffef\067\uffef\001\002\000\026\004\uffcc\005\uffcc\006" +
    "\uffcc\010\uffcc\022\uffcc\023\uffcc\024\uffcc\027\uffcc\030\uffcc" +
    "\044\uffcc\001\002\000\026\004\uffcb\005\uffcb\006\uffcb\010" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\027\uffcb\030\uffcb\044\uffcb" +
    "\001\002\000\026\004\uffd1\005\uffd1\006\uffd1\010\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\027\uffd1\030\uffd1\044\uffd1\001\002" +
    "\000\004\007\140\001\002\000\026\004\uffd0\005\uffd0\006" +
    "\uffd0\010\uffd0\022\uffd0\023\uffd0\024\uffd0\027\uffd0\030\uffd0" +
    "\044\uffd0\001\002\000\004\012\137\001\002\000\004\007" +
    "\134\001\002\000\026\004\uffcd\005\uffcd\006\uffcd\010\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\027\uffcd\030\uffcd\044\uffcd\001" +
    "\002\000\034\005\065\007\053\025\046\031\067\056\071" +
    "\057\063\060\057\061\055\062\051\063\064\064\061\065" +
    "\066\067\056\001\002\000\026\004\uffcf\005\uffcf\006\uffcf" +
    "\010\uffcf\022\uffcf\023\uffcf\024\uffcf\027\uffcf\030\uffcf\044" +
    "\uffcf\001\002\000\004\061\130\001\002\000\004\007\124" +
    "\001\002\000\004\007\072\001\002\000\034\005\065\007" +
    "\053\025\046\031\067\056\071\057\063\060\057\061\055" +
    "\062\051\063\064\064\061\065\066\067\056\001\002\000" +
    "\022\004\077\005\101\006\102\022\075\023\100\024\076" +
    "\027\074\030\103\001\002\000\034\005\065\007\053\025" +
    "\046\031\067\056\071\057\063\060\057\061\055\062\051" +
    "\063\064\064\061\065\066\067\056\001\002\000\034\005" +
    "\065\007\053\025\046\031\067\056\071\057\063\060\057" +
    "\061\055\062\051\063\064\064\061\065\066\067\056\001" +
    "\002\000\034\005\065\007\053\025\046\031\067\056\071" +
    "\057\063\060\057\061\055\062\051\063\064\064\061\065" +
    "\066\067\056\001\002\000\034\005\065\007\053\025\046" +
    "\031\067\056\071\057\063\060\057\061\055\062\051\063" +
    "\064\064\061\065\066\067\056\001\002\000\034\005\065" +
    "\007\053\025\046\031\067\056\071\057\063\060\057\061" +
    "\055\062\051\063\064\064\061\065\066\067\056\001\002" +
    "\000\034\005\065\007\053\025\046\031\067\056\071\057" +
    "\063\060\057\061\055\062\051\063\064\064\061\065\066" +
    "\067\056\001\002\000\034\005\065\007\053\025\046\031" +
    "\067\056\071\057\063\060\057\061\055\062\051\063\064" +
    "\064\061\065\066\067\056\001\002\000\004\061\104\001" +
    "\002\000\004\007\105\001\002\000\036\005\065\007\053" +
    "\010\uffdf\025\046\031\067\056\071\057\063\060\057\061" +
    "\055\062\051\063\064\064\061\065\066\067\056\001\002" +
    "\000\024\004\077\005\101\006\102\010\uffdd\022\075\023" +
    "\100\024\076\027\uffdd\030\103\001\002\000\004\010\110" +
    "\001\002\000\026\004\uffd5\005\uffd5\006\uffd5\010\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\027\uffd5\030\uffd5\044\uffd5\001\002" +
    "\000\006\010\uffe0\027\112\001\002\000\034\005\065\007" +
    "\053\025\046\031\067\056\071\057\063\060\057\061\055" +
    "\062\051\063\064\064\061\065\066\067\056\001\002\000" +
    "\024\004\077\005\101\006\102\010\uffde\022\075\023\100" +
    "\024\076\027\uffde\030\103\001\002\000\026\004\uffd7\005" +
    "\uffd7\006\uffd7\010\uffd7\022\uffd7\023\uffd7\024\uffd7\027\uffd7" +
    "\030\uffd7\044\uffd7\001\002\000\026\004\uffd8\005\uffd8\006" +
    "\102\010\uffd8\022\uffd8\023\uffd8\024\uffd8\027\uffd8\030\uffd8" +
    "\044\uffd8\001\002\000\026\004\077\005\101\006\102\010" +
    "\uffda\022\075\023\uffda\024\uffda\027\uffda\030\uffda\044\uffda" +
    "\001\002\000\026\004\uffd9\005\uffd9\006\102\010\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\027\uffd9\030\uffd9\044\uffd9\001\002" +
    "\000\026\004\077\005\101\006\102\010\uffdc\022\075\023" +
    "\100\024\uffdc\027\uffdc\030\uffdc\044\uffdc\001\002\000\026" +
    "\004\077\005\101\006\102\010\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\027\uffdb\030\uffdb\044\uffdb\001\002\000\022\004\077" +
    "\005\101\006\102\010\123\022\075\023\100\024\076\030" +
    "\103\001\002\000\026\004\uffd4\005\uffd4\006\uffd4\010\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\027\uffd4\030\uffd4\044\uffd4\001" +
    "\002\000\034\005\065\007\053\025\046\031\067\056\071" +
    "\057\063\060\057\061\055\062\051\063\064\064\061\065" +
    "\066\067\056\001\002\000\022\004\077\005\101\006\102" +
    "\010\126\022\075\023\100\024\076\030\103\001\002\000" +
    "\004\044\127\001\002\000\054\005\uffe5\007\uffe5\011\uffe5" +
    "\012\uffe5\020\uffe5\021\uffe5\025\uffe5\026\uffe5\031\uffe5\033" +
    "\uffe5\052\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5" +
    "\062\uffe5\063\uffe5\064\uffe5\065\uffe5\067\uffe5\001\002\000" +
    "\004\007\131\001\002\000\004\010\132\001\002\000\026" +
    "\004\uffca\005\uffca\006\uffca\010\uffca\022\uffca\023\uffca\024" +
    "\uffca\027\uffca\030\uffca\044\uffca\001\002\000\026\004\uffd6" +
    "\005\uffd6\006\uffd6\010\uffd6\022\uffd6\023\uffd6\024\uffd6\027" +
    "\uffd6\030\uffd6\044\uffd6\001\002\000\034\005\065\007\053" +
    "\025\046\031\067\056\071\057\063\060\057\061\055\062" +
    "\051\063\064\064\061\065\066\067\056\001\002\000\022" +
    "\004\077\005\101\006\102\010\136\022\075\023\100\024" +
    "\076\030\103\001\002\000\026\004\uffd3\005\uffd3\006\uffd3" +
    "\010\uffd3\022\uffd3\023\uffd3\024\uffd3\027\uffd3\030\uffd3\044" +
    "\uffd3\001\002\000\006\012\ufff8\032\ufff8\001\002\000\034" +
    "\005\065\007\053\025\046\031\067\056\071\057\063\060" +
    "\057\061\055\062\051\063\064\064\061\065\066\067\056" +
    "\001\002\000\022\004\077\005\101\006\102\022\075\023" +
    "\100\024\076\027\142\030\103\001\002\000\034\005\065" +
    "\007\053\025\046\031\067\056\071\057\063\060\057\061" +
    "\055\062\051\063\064\064\061\065\066\067\056\001\002" +
    "\000\022\004\077\005\101\006\102\022\075\023\100\024" +
    "\076\027\144\030\103\001\002\000\034\005\065\007\053" +
    "\025\046\031\067\056\071\057\063\060\057\061\055\062" +
    "\051\063\064\064\061\065\066\067\056\001\002\000\022" +
    "\004\077\005\101\006\102\010\146\022\075\023\100\024" +
    "\076\030\103\001\002\000\004\044\147\001\002\000\054" +
    "\005\uffe6\007\uffe6\011\uffe6\012\uffe6\020\uffe6\021\uffe6\025" +
    "\uffe6\026\uffe6\031\uffe6\033\uffe6\052\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\067\uffe6\001\002\000\050\005\065\007\053\011\054" +
    "\012\151\020\052\025\046\026\045\031\067\052\060\055" +
    "\070\056\071\057\063\060\057\061\055\062\051\063\064" +
    "\064\061\065\066\067\056\001\002\000\054\005\uffe7\007" +
    "\uffe7\011\uffe7\012\uffe7\020\uffe7\021\uffe7\025\uffe7\026\uffe7" +
    "\031\uffe7\033\uffe7\052\uffe7\055\uffe7\056\uffe7\057\uffe7\060" +
    "\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\067\uffe7" +
    "\001\002\000\022\004\077\005\101\006\102\010\156\022" +
    "\075\023\100\024\076\030\103\001\002\000\004\010\154" +
    "\001\002\000\034\005\065\007\053\025\046\031\067\056" +
    "\071\057\063\060\057\061\055\062\051\063\064\064\061" +
    "\065\066\067\056\001\002\000\026\004\uffd2\005\uffd2\006" +
    "\uffd2\010\uffd2\022\uffd2\023\uffd2\024\uffd2\027\uffd2\030\uffd2" +
    "\044\uffd2\001\002\000\026\004\uffc8\005\uffc8\006\uffc8\010" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\027\uffc8\030\uffc8\044\uffc8" +
    "\001\002\000\034\005\065\007\053\025\046\031\067\056" +
    "\071\057\063\060\057\061\055\062\051\063\064\064\061" +
    "\065\066\067\056\001\002\000\022\004\077\005\101\006" +
    "\102\010\161\022\075\023\100\024\076\030\103\001\002" +
    "\000\046\005\065\007\053\011\054\020\052\025\046\026" +
    "\045\031\067\052\060\055\070\056\071\057\063\060\057" +
    "\061\055\062\051\063\064\064\061\065\066\067\056\001" +
    "\002\000\054\005\uffe3\007\uffe3\011\uffe3\012\uffe3\020\uffe3" +
    "\021\163\025\uffe3\026\uffe3\031\uffe3\033\uffe3\052\uffe3\055" +
    "\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\064\uffe3\065\uffe3\067\uffe3\001\002\000\046\005\065\007" +
    "\053\011\054\020\052\025\046\026\045\031\067\052\060" +
    "\055\070\056\071\057\063\060\057\061\055\062\051\063" +
    "\064\064\061\065\066\067\056\001\002\000\054\005\uffe2" +
    "\007\uffe2\011\uffe2\012\uffe2\020\uffe2\021\uffe2\025\uffe2\026" +
    "\uffe2\031\uffe2\033\uffe2\052\uffe2\055\uffe2\056\uffe2\057\uffe2" +
    "\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\067" +
    "\uffe2\001\002\000\004\061\166\001\002\000\004\007\167" +
    "\001\002\000\036\005\065\007\053\010\uffdf\025\046\031" +
    "\067\056\071\057\063\060\057\061\055\062\051\063\064" +
    "\064\061\065\066\067\056\001\002\000\004\010\171\001" +
    "\002\000\022\004\uffd5\005\uffd5\006\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\030\uffd5\044\172\001\002\000\054\005\uffe4\007" +
    "\uffe4\011\uffe4\012\uffe4\020\uffe4\021\uffe4\025\uffe4\026\uffe4" +
    "\031\uffe4\033\uffe4\052\uffe4\055\uffe4\056\uffe4\057\uffe4\060" +
    "\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\067\uffe4" +
    "\001\002\000\022\004\077\005\101\006\102\022\075\023" +
    "\100\024\076\030\103\044\174\001\002\000\004\012\ufff7" +
    "\001\002\000\026\004\uffc9\005\uffc9\006\uffc9\010\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\027\uffc9\030\uffc9\044\uffc9\001\002" +
    "\000\034\005\065\007\053\025\046\031\067\056\071\057" +
    "\063\060\057\061\055\062\051\063\064\064\061\065\066" +
    "\067\056\001\002\000\022\004\077\005\101\006\102\010" +
    "\200\022\075\023\100\024\076\030\103\001\002\000\046" +
    "\005\065\007\053\011\054\020\052\025\046\026\045\031" +
    "\067\052\060\055\070\056\071\057\063\060\057\061\055" +
    "\062\051\063\064\064\061\065\066\067\056\001\002\000" +
    "\054\005\uffe1\007\uffe1\011\uffe1\012\uffe1\020\uffe1\021\uffe1" +
    "\025\uffe1\026\uffe1\031\uffe1\033\uffe1\052\uffe1\055\uffe1\056" +
    "\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1" +
    "\065\uffe1\067\uffe1\001\002\000\006\010\ufff5\027\203\001" +
    "\002\000\020\013\031\014\032\015\025\036\030\047\026" +
    "\050\027\051\023\001\002\000\006\010\ufff3\027\ufff3\001" +
    "\002\000\004\011\uffff\001\002\000\004\011\207\001\002" +
    "\000\004\032\210\001\002\000\004\034\211\001\002\000" +
    "\004\036\212\001\002\000\004\016\213\001\002\000\004" +
    "\007\214\001\002\000\004\035\215\001\002\000\004\041" +
    "\216\001\002\000\004\042\217\001\002\000\004\061\220" +
    "\001\002\000\004\010\221\001\002\000\004\011\222\001" +
    "\002\000\050\005\uffef\007\uffef\011\uffef\012\uffef\020\uffef" +
    "\025\uffef\026\uffef\031\uffef\052\uffef\055\uffef\056\uffef\057" +
    "\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef" +
    "\067\uffef\001\002\000\050\005\065\007\053\011\054\012" +
    "\224\020\052\025\046\026\045\031\067\052\060\055\070" +
    "\056\071\057\063\060\057\061\055\062\051\063\064\064" +
    "\061\065\066\067\056\001\002\000\004\012\225\001\002" +
    "\000\006\002\ufffe\037\ufffe\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\010\001\001" +
    "\000\002\001\001\000\004\007\011\001\001\000\004\010" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\016\001\001\000\004\012\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\035\020\034\021\036\001\001\000\004\017\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\042\001\001\000\010" +
    "\003\047\004\043\014\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\174\001\001\000\004\003\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\151\001\001\000\004\005\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\072\001\001\000\002\001\001\000" +
    "\004\003\121\001\001\000\004\003\120\001\001\000\004" +
    "\003\117\001\001\000\004\003\116\001\001\000\004\003" +
    "\115\001\001\000\004\003\114\001\001\000\004\003\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\105\015\106\001\001\000\004\016\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\140\001\001\000\002\001\001\000\004\003" +
    "\142\001\001\000\002\001\001\000\004\003\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\047\004\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\157\001\001" +
    "\000\002\001\001\000\006\003\047\004\161\001\001\000" +
    "\002\001\001\000\006\003\047\004\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\105\015\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\176\001\001\000\002\001\001" +
    "\000\006\003\047\004\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\203\021\036\001\001\000\002" +
    "\001\001\000\004\022\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\222\001\001\000\006\003" +
    "\047\004\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = e;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= NOT exp 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new NotExp(n.line, n.pos, e);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= NEW ID LPAREN RPAREN 
            {
              IExp RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue start = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
		RESULT = new NewExp(start.line, start.pos, name.lexeme);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= THIS 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new ThisLiteral(t.line, t.pos, t.lexeme, t.value);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= ID 
            {
              IExp RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new IdLiteral(name.line, name.pos, name.lexeme);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= FALSE 
            {
              IExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue f = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new FalseLiteral(f.line, f.pos, f.lexeme, f.value);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= TRUE 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new TrueLiteral(t.line, t.pos, t.lexeme, t.value);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int buttonleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int buttonright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue button = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new ButtonLiteral(button.line, button.pos, button.lexeme, button.value);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue col = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new ColorLiteral(col.line, col.pos, col.lexeme, col.value);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue integer = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new IntLiteral(integer.line, integer.pos, integer.lexeme, integer.value);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= LPAREN BYTE RPAREN exp 
            {
              IExp RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue start = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new ByteCast(start.line, start.pos, e);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= MEGGYCHECKBUTTON LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue start = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp arg = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = new MeggyCheckButton(start.line, start.pos, arg);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN 
            {
              IExp RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue start = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int x_argleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int x_argright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp x_arg = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int y_argleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int y_argright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp y_arg = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = new MeggyGetPixel(start.line, start.pos, x_arg, y_arg);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp DOT ID LPAREN exp_list RPAREN 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = new CallExp(e.getLine(), e.getPos(), e, name.lexeme, list);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= MINUS exp 
            {
              IExp RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue start = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new NegExp(start.line, start.pos, e);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp TIMES exp 
            {
              IExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp l = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp r = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new MulExp(t.line, t.pos, l, r);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp MINUS exp 
            {
              IExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp l = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp r = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new MinusExp(m.line, m.pos, l, r);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp PLUS exp 
            {
              IExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp l = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp r = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new PlusExp(p.line, p.pos, l, r);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp EQUAL exp 
            {
              IExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp l = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue eq = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp r = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new EqualExp(eq.line, eq.pos, l, r);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp LT exp 
            {
              IExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp l = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue lt = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp r = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new LtExp(lt.line, lt.pos, l, r);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp AND exp 
            {
              IExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp l = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp r = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new AndExp(a.line, a.pos, l, r);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comma_exp_list ::= 
            {
              LinkedList<IExp> RESULT =null;
		
		LinkedList<IExp> list = new LinkedList<IExp>();
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("comma_exp_list",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comma_exp_list ::= comma_exp_list COMMA exp 
            {
              LinkedList<IExp> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> cl = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		cl.add(e);
		RESULT = cl;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("comma_exp_list",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp_list ::= 
            {
              LinkedList<IExp> RESULT =null;
		
		LinkedList<IExp> list = new LinkedList<IExp>();
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp_list",11, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp_list ::= exp comma_exp_list 
            {
              LinkedList<IExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		list.addFirst(e);
		if (!list.isEmpty()) {
			list.addAll(list);
		}
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp_list",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= WHILE LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue start = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new WhileStatement(start.line, start.pos, e, s);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= IF LPAREN exp RPAREN statement ELSE statement 
            {
              IStatement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue start = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement el = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new IfStatement(start.line, start.pos, e, s, el);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= IF LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue start = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new IfStatement(start.line, start.pos, e, s, null); 
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= exp DOT ID LPAREN exp_list RPAREN SEMI 
            {
              IStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
		RESULT = new CallStatement(e.getLine(), e.getPos(), e, name.lexeme, list);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue start = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp arg = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
		RESULT = new MeggyDelay(start.line, start.pos, arg);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue start = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int x_argleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int x_argright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp x_arg = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int y_argleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int y_argright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp y_arg = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp col = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
		RESULT = new MeggySetPixel(start.line, start.pos, x_arg, y_arg, col);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= LBRACE statement_list RBRACE 
            {
              IStatement RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		BlockStatement list = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= MEGGYTONE 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new ToneType(t.line, t.pos);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= MEGGYBUTTON 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new ButtonType(b.line, b.pos);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= MEGGYCOLOR 
            {
              IType RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new ColorType(c.line, c.pos);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= VOID 
            {
              IType RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new VoidType(v.line, v.pos);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= INT 
            {
              IType RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new IntType(i.line, i.pos);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= BYTE 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new ByteType(b.line, b.pos);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= BOOLEAN 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new BoolType(b.line, b.pos);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement_list ::= 
            {
              BlockStatement RESULT =null;
		
		BlockStatement list = new BlockStatement(0, 0);
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement_list ::= statement_list statement 
            {
              BlockStatement RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		BlockStatement list = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		list.getStatements().add(s);
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal ::= type ID 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new Formal(t.getLine(), t.getPos(), t, name.lexeme);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal",14, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comma_list ::= 
            {
              LinkedList<Formal> RESULT =null;
		
		LinkedList<Formal> list = new LinkedList<Formal>();
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("comma_list",13, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comma_list ::= comma_list COMMA formal 
            {
              LinkedList<Formal> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<Formal> cl = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		cl.add(f);
		RESULT = cl;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("comma_list",13, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arg_list ::= 
            {
              LinkedList<Formal> RESULT =null;
		
		LinkedList<Formal> list = new LinkedList<Formal>();
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("arg_list",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arg_list ::= formal comma_list 
            {
              LinkedList<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<Formal> list = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		list.addFirst(f);
		if (!list.isEmpty()) {
			list.addAll(list);
		}
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("arg_list",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // return_stmt ::= 
            {
              IExp RESULT =null;
		
		RESULT = null;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("return_stmt",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // return_stmt ::= RETURN exp SEMI 
            {
              IExp RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue start = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = e;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("return_stmt",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method_decl ::= PUBLIC type ID LPAREN arg_list RPAREN LBRACE statement_list return_stmt RBRACE 
            {
              MethodDecl RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		SymbolValue start = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		IType ret = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		LinkedList<Formal> formals = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		BlockStatement stmts = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int retexpleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int retexpright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp retexp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = new MethodDecl(start.line, start.pos, ret, name.lexeme, formals, null, stmts.getStatements(), retexp);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_decl",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method_decl_list ::= 
            {
              LinkedList<MethodDecl> RESULT =null;
		
		LinkedList<MethodDecl> list = new LinkedList<MethodDecl>();
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_decl_list",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // method_decl_list ::= method_decl_list method_decl 
            {
              LinkedList<MethodDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> list = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MethodDecl met = (MethodDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		list.add(met);
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_decl_list",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_decl ::= CLASS ID LBRACE method_decl_list RBRACE 
            {
              TopClassDecl RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue start = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> list = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = new TopClassDecl(start.line, start.pos, name.lexeme, null, list);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_decl",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_decl_list ::= 
            {
              LinkedList<IClassDecl> RESULT =null;
		
		LinkedList<IClassDecl> list = new LinkedList<IClassDecl>();
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_decl_list",5, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_decl_list ::= class_decl_list class_decl 
            {
              LinkedList<IClassDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IClassDecl> list = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		TopClassDecl cl = (TopClassDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		list.add(cl);
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_decl_list",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE statement_list RBRACE RBRACE 
            {
              MainClass RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-15)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).right;
		SymbolValue start = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-17)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-16)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		BlockStatement list = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
		RESULT = new MainClass(start.line, start.pos, name.lexeme, param.lexeme, list);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              MainClass RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue start = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;

		// Check filename is class name, if not exit with error message
		String progName = new String(parser.programName);
		//Truncate the '.java' extension from the program name
		progName = progName.substring(0, progName.indexOf('.'));
		if (!progName.equals(name.lexeme)) {
			System.err.println("ERROR: File name '" + progName +
			"'(.java) does not match class name '" + name.lexeme +
			"'. Exiting.");
			System.exit(0);
		}
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",16, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class class_decl_list 
            {
              Program RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue start = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int mcleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass mc = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int clistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int clistright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IClassDecl> clist = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
			RESULT = new Program(start.line, start.pos, mc, clist);
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

